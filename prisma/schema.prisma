generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PhoneNumber {
  id        Int       @id @default(autoincrement())
  number    String    @unique @db.VarChar(30)
  createdAt DateTime  @default(now()) @map("created_at")
  doctors   Doctor[]
  location  Location?
  patients  Patient[]

  @@map("phone_numbers")
}

model Location {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  address       String?
  phoneNumberId Int         @unique @map("phone_number_id")
  categories    Category[]
  doctors       Doctor[]
  expenses      Expense[]
  invoices      Invoice[]
  items         Item[]
  phoneNumber   PhoneNumber @relation(fields: [phoneNumberId], references: [id])
  patients      Patient[]
  users         User[]

  @@map("locations")
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  category    String
  expiryDate  DateTime   @map("expiry_date") @db.Date
  description String?
  locationId  Int        @map("location_id")
  barcode     String     @unique @default(uuid())
  itemUnits   ItemUnit[]
  location    Location   @relation(fields: [locationId], references: [id])

  itemHistories ItemHistory[]

  @@map("items")
}

model ItemUnit {
  id            Int      @id @default(autoincrement())
  unitType      UnitType @map("unit_type")
  purchasePrice Decimal  @map("purchase_price") @db.Decimal(10, 2)
  itemId        Int      @map("item_id")
  quantity      Int
  rate          Int
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_units")
}

model ItemHistory {
  id Int @id @default(autoincrement())

  userName  String        @map("user_name")
  createdAt DateTime      @default(now()) @map("created_at")
  action    HistoryAction

  userId String? @map("user_id")
  itemId Int     @map("item_id")

  //Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  item Item  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  itemHistoryDetails ItemHistoryDetail[]

  @@map("item_histories")
}

model ItemHistoryDetail {
  id Int @id @default(autoincrement())

  oldUnitType UnitType @map("old_unit_type")
  newUnitType UnitType @map("new_unit_type")

  oldRate Int @map("old_rate")
  newRate Int @map("new_rate")

  oldQuantity Int @map("old_quantity")
  newQuantity Int @map("new_quantity")

  oldPurchasePrice Decimal @map("old_purchase_price") @db.Decimal(10, 2)
  newPurchasePrice Decimal @map("new_purchase_price") @db.Decimal(10, 2)

  itemHistoryId Int @map("item_history_id")

  //Relations
  itemHistory ItemHistory @relation(fields: [itemHistoryId], references: [id], onDelete: Cascade)

  @@map("item_history_details")
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  retailPrice Decimal @map("retail_price") @db.Decimal(10, 2)

  @@map("services")
}

model Patient {
  id               Int              @id @default(autoincrement())
  name             String
  gender           Gender
  dateOfBirth      DateTime         @map("date_of_birth") @db.Date
  address          String?
  patientStatus    PatientStatus    @map("patient_status")
  patientCondition PatientCondition @map("patient_condition")
  patientType      PatientType      @map("patient_type")
  department       Department
  registeredAt     DateTime         @default(now()) @map("registered_at")
  phoneNumberId    Int              @map("phone_number_id")
  locationId       Int              @map("location_id")
  email            String?
  deletedAt        DateTime?        @map("deleted_at")
  location         Location         @relation(fields: [locationId], references: [id])
  phoneNumber      PhoneNumber      @relation(fields: [phoneNumberId], references: [id])
  treatments       Treatment[]

  @@index([deletedAt])
  @@map("patients")
}

model Doctor {
  id            String      @id @default(uuid())
  name          String
  commission    Decimal     @db.Decimal(10, 2)
  address       String?
  description   String?
  locationId    Int         @map("location_id")
  phoneNumberId Int         @map("phone_number_id")
  email         String
  deletedAt     DateTime?   @map("deleted_at")
  location      Location    @relation(fields: [locationId], references: [id])
  phoneNumber   PhoneNumber @relation(fields: [phoneNumberId], references: [id])
  treatments    Treatment[]

  @@index([deletedAt])
  @@index([email])
  @@map("doctors")
}

model Treatment {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  doctorId      String    @map("doctor_id")
  patientId     Int       @map("patient_id")
  diagnosis     String?
  treatment     String
  investigation String?
  invoice       Invoice[]
  doctor        Doctor    @relation(fields: [doctorId], references: [id])
  patient       Patient   @relation(fields: [patientId], references: [id])

  @@map("treatments")
}

model Invoice {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now()) @map("created_at")
  locationId         Int              @map("location_id")
  treatmentId        Int?             @map("treatment_id")
  discountAmount     Decimal          @map("discount_amount") @db.Decimal(10, 2)
  note               String?
  paymentDescription String?          @map("payment_description")
  paymentMethod      PaymentMethod    @map("payment_method")
  totalAmount        Decimal          @map("total_amount") @db.Decimal(10, 2)
  subTotal           Decimal          @map("sub_total") @db.Decimal(10, 2)
  totalItemDiscount  Decimal          @map("total_item_discount") @db.Decimal(10, 2)
  invoiceItems       InvoiceItem[]
  invoiceServices    InvoiceService[]
  location           Location         @relation(fields: [locationId], references: [id])
  treatment          Treatment?       @relation(fields: [treatmentId], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id            Int      @id @default(autoincrement())
  itemName      String   @map("item_name")
  unitType      UnitType @map("unit_type")
  quantity      Int
  discountPrice Decimal  @map("discount_price") @db.Decimal(10, 2)
  invoiceId     Int      @map("invoice_id")
  retailPrice   Decimal  @map("retail_price") @db.Decimal(10, 2)
  barcode       String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model InvoiceService {
  id          Int     @id @default(autoincrement())
  invoiceId   Int     @map("invoice_id")
  name        String
  retailPrice Decimal @map("retail_price") @db.Decimal(10, 2)
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_services")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now()) @map("created_at")
  locationId   Int           @map("location_id")
  roleId       Int           @map("role_id")
  pricePercent Int           @map("price_percent")
  location     Location      @relation(fields: [locationId], references: [id])
  role         Role          @relation(fields: [roleId], references: [id])
  itemHistories  ItemHistory[]

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  users       User[]
  permissions Permission[] @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id      Int    @id @default(autoincrement())
  action  String
  subject String
  roles   Role[] @relation("PermissionToRole")

  @@map("permissions")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  locationId  Int       @map("location_id")
  location    Location  @relation(fields: [locationId], references: [id])
  expenses    Expense[]

  @@map("categories")
}

model Expense {
  id          Int      @id @default(autoincrement())
  name        String
  amount      Decimal
  date        DateTime @db.Date
  description String?
  locationId  Int      @map("location_id")
  categoryId  Int      @map("category_id")
  category    Category @relation(fields: [categoryId], references: [id])
  location    Location @relation(fields: [locationId], references: [id])

  @@map("expenses")
}

enum UnitType {
  btl
  amp
  tube
  strip
  cap
  pcs
  sac
  box
  pkg
  tab
}

enum Gender {
  male
  female
}

enum PatientStatus {
  new_patient
  follow_up
  post_op
}

enum PatientCondition {
  disable
  pregnant_woman
}

enum Department {
  og
  oto
  surgery
  general
}

enum PatientType {
  in
  out
}

enum Action {
  manage
  read
  create
  update
  delete
}

enum Subject {
  all
  PhoneNumber
  Location
  Item
  ItemUnit
  Service
  Patient
  Doctor
  Treatment
  Invoice
  InvoiceItem
  User
  Role
  Permission
  Category
  Expense
}

enum PaymentMethod {
  kpay
  wave
  cash
  others
}

enum HistoryAction {
  edit
  import
}
